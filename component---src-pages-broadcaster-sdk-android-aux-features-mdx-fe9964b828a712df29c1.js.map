{"version":3,"file":"component---src-pages-broadcaster-sdk-android-aux-features-mdx-fe9964b828a712df29c1.js","mappings":"yPAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,qCACA,oNAAsM,sBAAYC,WAAW,KAAvB,sBAAtM,cAAkR,aAAGA,WAAW,IAC5R,KAAQ,kFADsQ,wDAAlR,4HAE6L,sBAAYA,WAAW,KAAvB,aAF7L,iBAGA,mJAAqI,aAAGA,WAAW,IAC/I,KAAQ,2DADyH,kBAArI,WAGA,kDACA,mBACE,cAAIA,WAAW,MAAf,uDAA2E,sBAAYA,WAAW,MAAvB,sBAA3E,iEACE,cAAIA,WAAW,OACb,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,sBAApB,uEACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,uBAApB,uBAA2G,sBAAYA,WAAW,MAAvB,eAA3G,gHAAmR,sBAAYA,WAAW,MAAvB,YAAnR,uDACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,gBAApB,mFAGJ,cAAIA,WAAW,MAAf,+FAAmH,sBAAYA,WAAW,MAAvB,UAAnH,qBAA2L,sBAAYA,WAAW,MAAvB,qDAC3L,cAAIA,WAAW,MAAf,wDAA4E,sBAAYA,WAAW,MAAvB,yDAA5E,gCAA8M,cAAIA,WAAW,MAAf,uBAA9M,mFACA,cAAIA,WAAW,MAAf,8HAAkJ,sBAAYA,WAAW,MAAvB,+CAAlJ,qCAA+Q,sBAAYA,WAAW,MAAvB,0CAA/Q,YACA,cAAIA,WAAW,MAAf,YAAgC,sBAAYA,WAAW,MAAvB,uBAAhC,mBAAmH,sBAAYA,WAAW,MAAvB,eAAnH,mMACA,cAAIA,WAAW,MAAf,uCAA2D,sBAAYA,WAAW,MAAvB,UAA3D,2FAAyM,sBAAYA,WAAW,MAAvB,yEAAzM,sHACA,cAAIA,WAAW,MAAf,6BAAiD,sBAAYA,WAAW,MAAvB,wBAAjD,oCAAsJ,sBAAYA,WAAW,MAAvB,kBAAtJ,0EAA2R,sBAAYA,WAAW,MAAvB,kBAA3R,yBACE,cAAIA,WAAW,OACb,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,eAApB,uDACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,aAApB,iDACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,gBAApB,0FACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,WAApB,sEACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,WAApB,4GACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,YAApB,+GAAwL,sBAAYA,WAAW,MAAvB,YAAxL,qCAAkR,sBAAYA,WAAW,MAAvB,UAAlR,SAIN,kEAAoD,aAAGA,WAAW,IAC9D,KAAQ,6FADwC,mCAApD,wDAOJJ,EAAWK,gBAAiB","sources":["webpack://example/./src/pages/broadcaster-sdk-android/aux-features.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Authentication`}</h2>\n    <p>{`IBM Video Streaming SDK provides a secure way to authenticate users with IBM ID or legacy Ustream account and getting access for IBM Channel API features for example listing or broadcasting. `}<inlineCode parentName=\"p\">{`OAuthAuthenticator`}</inlineCode>{` wraps up `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm.github.io/video-streaming-developer-docs/api-basics-authentication\"\n      }}>{`IBM Video Streaming Channel APIs Authentication flow`}</a>{` and implements a basic authentication service that presents the IBM Video Streaming authentication site in an embedded `}<inlineCode parentName=\"p\">{`CustomTab`}</inlineCode>{` on Android.`}</p>\n    <p>{`To use the authenticator obtain the necessary configuration parameters from you Channel API credentials using the Dashboard’s `}<a parentName=\"p\" {...{\n        \"href\": \"https://video.ibm.com/dashboard/integrations/api-access\"\n      }}>{`API/SDK access`}</a>{` page.`}</p>\n    <p>{`Current authentication flow:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Set up the authentication client by creating a new `}<inlineCode parentName=\"li\">{`OAuthAuthenticator`}</inlineCode>{` instance. You will need to supply the following parameters: `}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`savedInstanceState`}</inlineCode>{` of your Activity or Fragment, so the client can persist its state`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`clientConfiguration`}</inlineCode>{` that contains the `}<inlineCode parentName=\"li\">{`redirectUrl`}</inlineCode>{` which will be used by the backend service to call back to your application once login is finished and your `}<inlineCode parentName=\"li\">{`clientId`}</inlineCode>{` that identifies the current API using application`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errorHandler`}</inlineCode>{` which will notify you about possible errors occurring during authentication`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Check whether you need to start the authentication process based on the Activity’s current `}<inlineCode parentName=\"li\">{`Intent`}</inlineCode>{` parameter using `}<inlineCode parentName=\"li\">{`authenticator.shouldStartAuthentication(intent)`}</inlineCode></li>\n      <li parentName=\"ol\">{`Start the authentication process (if needed) using: `}<inlineCode parentName=\"li\">{`authenticator.startAuthentication(applicationContext)`}</inlineCode>{`. It is important to supply `}<em parentName=\"li\">{`Application Context`}</em>{` so your Activity can be destroyed and recreated during a configuration change`}</li>\n      <li parentName=\"ol\">{`When your activity is changing configuration or going into the background let the Authenticator save its state by calling `}<inlineCode parentName=\"li\">{`authenticator.onSaveInstanceState(outState)`}</inlineCode>{` in your Activity’s / Fragment’s `}<inlineCode parentName=\"li\">{`onSaveInstanceState(outState: Bundle?)`}</inlineCode>{` method`}</li>\n      <li parentName=\"ol\">{`In your `}<inlineCode parentName=\"li\">{`AndroidManifest.xml`}</inlineCode>{` listen to the `}<inlineCode parentName=\"li\">{`redirectUrl`}</inlineCode>{` (a.k.a callback url) using an intent filter. This way when the login is complete the browser can open the application and the authentication can be completed. See the sample app for details`}</li>\n      <li parentName=\"ol\">{`When the Activity receives the new `}<inlineCode parentName=\"li\">{`Intent`}</inlineCode>{` after a successful authentication, you can request an Access Token from it by calling `}<inlineCode parentName=\"li\">{`authenticator.parseIntentForAccessToken(intent, tokenAvailableLambda)`}</inlineCode>{`. The result lambda can be called from a worker thread, so please make sure to post the result to the Main Thread`}</li>\n      <li parentName=\"ol\">{`When the above described `}<inlineCode parentName=\"li\">{`tokenAvailableLambda`}</inlineCode>{` is called it will return you a `}<inlineCode parentName=\"li\">{`TokenContainer`}</inlineCode>{` object that will be used to access the IBM Channel API services. The `}<inlineCode parentName=\"li\">{`TokenContainer`}</inlineCode>{` holds the following:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`accessToken`}</inlineCode>{`: the token with which the Channel API can be used`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`expiresAt`}</inlineCode>{`: an expiration date in Unix Epoch timestamp`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`refreshToken`}</inlineCode>{`: that can be used to refresh the Access Token when it has passed its expiration date`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`idToken`}</inlineCode>{`: contains information related to authenticity checking of tokens`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`subject`}</inlineCode>{`: either the email address of the logged in user or the user name (in case of a legacy Ustream account)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`userType`}</inlineCode>{`: this is a legacy feature. Describes the type of the logged in account. Distinguishes between SSO (value: `}<inlineCode parentName=\"li\">{`external`}</inlineCode>{`) and legacy user logins (value: `}<inlineCode parentName=\"li\">{`simple`}</inlineCode>{`)`}</li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`For more details see the sample app or visit `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm.github.io/video-streaming-developer-docs/channel-api-basic-channel-management\"\n      }}>{`IBM Video Streaming Channel API`}</a>{` page for more information about Channel API usage.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}